// <auto-generated />
using System;
using MVC_CRUD.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVC_CRUD.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251011192302_MGx05")]
    partial class MGx05
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MVC_CRUD.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Artist = "Jane Doe",
                            Date = new DateOnly(2023, 8, 1),
                            ImagePath = "musicfest.jpg",
                            Title = "Music Fest",
                            VenueId = 1
                        },
                        new
                        {
                            Id = 2,
                            Artist = "John Smith",
                            Date = new DateOnly(2024, 5, 15),
                            ImagePath = "musicfest.jpg",
                            Title = "Tech Expo",
                            VenueId = 2
                        },
                        new
                        {
                            Id = 3,
                            Artist = "Alice Lee",
                            Date = new DateOnly(2025, 11, 20),
                            ImagePath = "musicfest.jpg",
                            Title = "Art Show",
                            VenueId = 3
                        });
                });

            modelBuilder.Entity("MVC_CRUD.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EventId = 1,
                            Price = 50.0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            EventId = 2,
                            Price = 75.0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            EventId = 3,
                            Price = 100.0,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("MVC_CRUD.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            Name = "Alice",
                            Surname = "Johnson"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            Name = "Bob",
                            Surname = "Smith"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie@example.com",
                            Name = "Charlie",
                            Surname = "Brown"
                        });
                });

            modelBuilder.Entity("MVC_CRUD.Models.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 500,
                            Description = "A large venue for concerts and events.",
                            Location = "Downtown",
                            Name = "Grand Hall"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 1000,
                            Description = "An outdoor arena for sports and large gatherings.",
                            Location = "Uptown",
                            Name = "Open Arena"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 300,
                            Description = "A modern venue for conferences and meetings.",
                            Location = "Midtown",
                            Name = "Conference Center"
                        });
                });

            modelBuilder.Entity("MVC_CRUD.Models.Event", b =>
                {
                    b.HasOne("MVC_CRUD.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("MVC_CRUD.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
